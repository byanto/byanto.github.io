<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned (TIL) on Budi Yanto</title>
    <link>http://localhost:1313/til/</link>
    <description>Recent content in Today I Learned (TIL) on Budi Yanto</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>True Integration Tests with Spring Boot and Testcontainers</title>
      <link>http://localhost:1313/til/integration-tests-spring-boot-testcontainers/</link>
      <pubDate>Thu, 02 Oct 2025 23:50:10 +0000</pubDate>
      <guid>http://localhost:1313/til/integration-tests-spring-boot-testcontainers/</guid>
      <description>&lt;h3 id=&#34;context&#34;&gt;Context&lt;/h3&gt;&#xA;&lt;p&gt;In my last TIL, I explored how &lt;code&gt;@DataJpaTest&lt;/code&gt; helps simplify repository testing in Spring Boot. That approach was a huge improvement compared to running the full application context — it gave me lightweight, focused tests for my JPA repositories.&lt;/p&gt;&#xA;&lt;p&gt;But &lt;code&gt;@DataJpaTest&lt;/code&gt; usually defaults to an in-memory H2 database, which isn’t always a perfect mirror of my production database (PostgreSQL). That works for quick feedback, but deep down, I didn’t feel comfortable. If I want to trust my backend logic, I need to see my queries working against a real PostgreSQL instance, not a simulator. A query that works on H2 might fail on a real PostgreSQL production database.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simplifying Repository Tests with @DataJpaTest</title>
      <link>http://localhost:1313/til/simplify-repository-test-datajpatest/</link>
      <pubDate>Wed, 01 Oct 2025 23:50:10 +0000</pubDate>
      <guid>http://localhost:1313/til/simplify-repository-test-datajpatest/</guid>
      <description>&lt;h3 id=&#34;context&#34;&gt;Context&lt;/h3&gt;&#xA;&lt;p&gt;While building &lt;strong&gt;Fintrackr&lt;/strong&gt;, I reached the point where I needed to test my repository layer. Up to this point, I had been using &lt;code&gt;@SpringBootTest&lt;/code&gt; for everything because it seemed like the default choice. But I quickly noticed that my tests were taking longer to run than expected, and they were starting up a lot more than I actually needed. It makes me started to think: &lt;em&gt;Do I really need to spin up the whole Spring Boot application just to test a repository?&lt;/em&gt; That felt too heavy.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
